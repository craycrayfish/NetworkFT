"""DataSet to read transactions saved as json files from the Covalent API"""

import json
from copy import deepcopy
from pathlib import Path, PurePosixPath
from typing import Any, Dict

import fsspec
from kedro.io.core import (
    AbstractVersionedDataSet,
    Version,
    get_filepath_str,
    get_protocol_and_path,
)


class CovalentDataSet(AbstractVersionedDataSet):
    """Loads transaction data as saved from covalent API"""

    def __init__(
        self,
        filepath: str,
        load_args: Dict[str, Any] = None,
        version: Version = None,
        credentials: Dict[str, Any] = None,
        fs_args: Dict[str, Any] = None,
    ) -> None:
        """Creates a new instance of ``CovalentDataSet`` pointing to a concrete
        directory on a specific filesystem.

        Args:
            filepath: Filepath in POSIX format to a JSON file prefixed with a
            protocol like `s3://`.
                If prefix is not provided, `file` protocol (local filesystem)
                will be used.
                The prefix should be any protocol supported by ``fsspec``.
                Note: `http(s)` doesn't support versioning.
            save_args: json options for saving JSON files (arguments passed
                into ```json.dump``). Here you can find all available
                arguments:
                https://docs.python.org/3/library/json.html
                All defaults are preserved, but "default_flow_style", which is
                set to False.
            version: If specified, should be an instance of
                ``kedro.io.core.Version``. If its ``load`` attribute is
                None, the latest version will be loaded. If its ``save``
                attribute is None, save version will be autogenerated.
            credentials: Credentials required to get access to the underlying
            filesystem.
                E.g. for ``GCSFileSystem`` it should look like
                `{"token": None}`.
            fs_args: Extra arguments to pass into underlying filesystem class
            constructor
                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as
                well as to pass to the filesystem's `open` method through
                nested keys `open_args_load` and `open_args_save`.
                Here you can find all available arguments for `open`:
                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open
                All defaults are preserved, except `mode`, which is set to `r`
                when loading and to `w` when saving.
        """
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop("open_args_load", {})
        _fs_open_args_save = _fs_args.pop("open_args_save", {})
        _credentials = deepcopy(credentials) or {}

        protocol, path = get_protocol_and_path(filepath, version)

        self._protocol = protocol
        if protocol == "file":
            _fs_args.setdefault("auto_mkdir", True)
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)

        super().__init__(
            filepath=PurePosixPath(path),
            version=version,
            exists_function=self._fs.exists,
            glob_function=self._fs.glob,
        )

        self._load_args = {}
        if load_args is not None:
            self._load_args.update(load_args)

        _fs_open_args_save.setdefault("mode", "w")
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _load(self) -> Dict:
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        txs_file_suffix = self._load_args.get("suffix", "")
        txs_files = [f for f in Path(load_path).iterdir() if txs_file_suffix in f.name]

        txs = {}
        for txs_file in txs_files:
            with self._fs.open(str(txs_file)) as f:
                txs[txs_file.stem.split("_")[0]] = json.load(f)
        return txs

    def _describe(self):
        pass

    def _save(self):
        pass
